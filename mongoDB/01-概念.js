/* 
1. 什么是数据库?
    数据库(Database)是一个按照数据结构进行数据的组织、管理、存放数据的仓库。

2.关系型数据库
    按照关系模型存储数据的数据库，数据与数据之间的关联非常密切，可以实现跨数据表查询数据，占用更少的硬盘实现更多数据存储。
    T-SQL 标准的结构化查询语言，是关系型数据库的通用查询语言。
    常见的关系型数据库：
        Mysql    sql-server    access   sqlite ...
    结构：
        一台服务器 => 数据库 => 数据表 => 数据行

3.非关系型数据库
    不按照关系型模型存储数据的数据库, 统称为noSQL(Not only SQL)。
        第一层含义: 不是SQL,不是关系型数据库。
        第二层含义: Not Only SQL，不仅仅是SQL。
    常见的非关系型数据库：
        MongoDB  Redis  HBase  CouchDB  SQLite等
    结构: 
        一台服务器 => 数据库 => 集合 => 文档

        NoSQL用于超大规模数据的存储

4. MongoDB
    MongoDB是一个基于分布式文件存储的数据库,目前是世界上用的最多的非关系型的数据库, 也是最像关系型的非关系型数据库

    使用MongoDB的公司包括: BATJ(百度/阿里/京东...)、360...
    
    MongoDB的优点:
        它的优点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：
            1.面向集合存储，易存储对象类型的数据
            2.模式自由
            3.支持动态查询
            4.支持完全索引，包含内部对象。
            5.支持复制和故障恢复
            6.使用高效的二进制数据存储，包括大型对象（如视频等）
            7.自动处理碎片，以支持云计算层次的扩展性
            8、支持RUBY，PYTHON，JAVA，C++,PHP等多种语言
            9.文件储存格式为BSON（一种JSON的扩展）

            BSON是一种类似json的二进制形式的存储格式,内嵌文档对象和数组队形, 特点: 轻量性、可遍历性、高效性


    MongoDB以BSOn（二进制+JSON）格式进行数据存储，可以直接储存数组、对象。

5.安装mongoDB
    cmd输入mongo     //启动mongo
6.常用数据库命令
    1) 显示当前有哪些数据库       show dbs  (数据库里面必须有一条数据,才能显示出来) 
    2) 使用数据库      use dbname(数据库名)     如果存在,直接使用,如果不存在,自动创建
    3) 检测当前你咋那个数据库里面:  db
    4)显示当前数据库有哪些集合: show collections
    5)显示当前集合有哪些数据:  db.集合名.find()

/////////////////////////////////////////////////////////////////////
    增加数据:
        备注: 在插入数据的时候,如果有次集合,就往集合中插入,否则就自动创建集合再插入数据
        1) db.集合名.insert({"key":"value"})
            示例: db.jihe.insert({"name":"张三","age":18})
            
        2) db.集合名.save({"key":"value"})
            示例: db.jihe.save({"name":"李四","age":20})
        
        区别: 
            save()方法和insert()方法,都可以往数据库里面插入数据,但是有区别
            save()方法,如果插入一条已经存在的数据会覆盖;
            insert()方法.如果插入一条已经存在的数据,会无法插入
            判断是否已存在, 是看前面的_id


/////////////////////////////////////////////////////////////////////
    删除数据:
        1) 删除文档(删除json数据)
            a)  db.集合名.remove()    //删除集合下的所有数据
            b)  db.集合名.remove(key:value);    //按条件删除
            示例:
                db.集合名.remove({"age":18});     //删除所有年龄为18岁的数据

        2) 删除集合
            db.集合名.drop()

        3) 删除数据库(在哪个数据库中就删除哪个)
            db.runCommand({"dropDatabase":1})


/////////////////////////////////////////////////////////////////////
    查找数据:
        1) db.集合名.find()     //查找集合中的所有数据

        2) db.集合名.findOne()    //查找集合下的第一条数据

        3) db.集合名.find().pretty()      //查找集合下所有数据,格式化再显示出来


/////////////////////////////////////////////////////////////////////
    修改数据:
        1) db.集合名.update({key:value},{key:value})        
            //update()方法,第一对对象是查找的条件,第二对立面是修改后的新内容
            //获取到匹配对象的所有信息,替换为新内容
                比如: {"name":"张三","age":18}  =>   {"age":38}

            优化此方法:
                获取到匹配内容,根据新内容的key值找到匹配内容修改,如果没有的话,就变为新添加的键值对
                db.集合名.update({"name":"张小三"},{$set:{"age":35}})
                
7.高级条件查询命令
    1) db.集合名.find({key:value})   //查找key = value的数据
        实例: 查找女歌手
            db.list.find({"sex":"女"})

-------------------------------------------------------------------------
    2) db.集合名.find({"key":{$gt:value}})        $gt --- 大于value的  
        实例: 查找年龄大于53岁的歌手
            db.list.find({"age":{$gt:53}}).pretty()

    3) db.集合名.find({"key":{$lt:value}})        $lt --- 小于value的  
        实例: 查找年龄小于53岁的歌手
            db.list.find({"age":{$lt:53}}).pretty()

    4) db.集合名.find({"key":{$gte:value}})        $gte --- 大于等于value的  
        实例: 查找成绩大于等于95的歌星
            db.list.find({"score":{$gte:95}}).pretty()

    5) db.集合名.find({"key":{$lte:value}})        $lte --- 小于等于value的  
        实例: 查找年龄小于等于32的歌星
            db.list.find({"age":{$lte:32}}).pretty()

    6) db.集合名.find({"key":{ $gte:value1 , $lte:value2 }})        后面是在指定范围的取值
        实例: 查找年龄在30-40(包括30与40岁的)之间的歌星
            db.list.find({"age":{ $gte:30 , $lte:40 }}).pretty()

-------------------------------------------------------------------------
    7) db.集合名.find({"key":{$ne:value}})     $ne  ---   不等于
        实例: 查询外国歌手
            db.list.find({"country":{$ne:"中国"}}).pretty()   

    8) db.集合名.find({"key":{ $mod : [10,1] }})
        取模运算,条件相当于key % 10 == 1,即key除以10余数为1的
        实例: 查询成绩为 5/15/20/25..95的歌星
            db.list.find({"score":{ $mod : [10,5]}}).pretty()

    9) db.集合名.find({"key":{ $in : [1,2,3]}})     $in --- 只要条件满足后面值中的任意一个条件就行
        实例: 查询序号(num)为3或6或9 的歌星
            db.list.find({"num":{ $in :["3","6","9"] }}).pretty()

    10) db.集合名.find({"key":{ $nin :[1,2,3 }})       $nin --- 不属于数组中的任意一个
        实例: 查询国际不为美国和韩国的歌手
            db.list.find({"country":{ $nin:["美国","韩国"]}}).pretty()

    11) db,集合名.find({"key":{ $size : 1 }})    $size ---数量和尺寸,条件相当于key对应值的数量是1(值必须是数组)
        实例: 查询有3个代表作品的歌手(相当于查询当前值里面包含的数量)
            db.list.find({"works":{$size:3}}).pretty()

    12) db.集合名.find({"key":{ $exists:true|false }})
        $exists字段存在,true返回存在字段key的数据,false返回不存在字段的key的数据
        实例: 查询包含tel字段的数据
            db.list.find({"tel":{$exists: true}}).pretty()

    13) db.集合名.find({"key":{$or:[{a:1},{b:2}]})
        符合两个条件中的任意一个数据,都会被查询出来
        实例:   某活动除了要刘德华参数,另外需要团队的全部女歌手配合演出
            db.list.find({$or:[{"name":"刘德华"},{"sex":"女"}]}).pretty(

    14) 插入一条数据
        db.list.insert({"name":"text","score":{"yw":80,"sx":90,"yy":95}})

        查询: db.list.find({"score.yw":80})

    
-------------------------------------------------------------------
补充几个方法:
    1) sort(key:1/-1)  排序   按照key字段排序,1位升序,-1为降序
        示例: 按照年龄从小到大排序
        db.list.find({}).sort({"age":1}).pretty()
        示例: 按照得分从高到底排序
        db.list.find({}).sort({"score":-1}).pretty()

    2) skip(n)  跳过n条
        示例: 查询第3条后的所有数据
        db.list.find({}).skip(3).pretty()

    3) limit(n)    限制输出多少条
        示例: 输出前5条
        db.list.find({}).limit(5).pretty()

    综合使用:
        示例: 请输出6到10条的数据
         db.list.find({}).skip(5).limit(5).pretty()




*/