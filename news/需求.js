/* 
1.需求分析:
    完成一个简单的新闻发布系统

    功能需求;
        1) 新增功能的实现   表单 点击发布可以新增新闻
        2) 新闻列表功能的实现   数据库里面的所有新闻都可以在这个列表中显示
        3) 删除功能实现    点击删除可以删除此条数据
        4) 修改功能的实现   点击修改   可以对这一条新闻修改
        5) 点击新闻标题   可以显示新闻的详细内容

    思考: (增删改查都遵循这两个流程)
        数据从页面到数据库:
            1) 前端-用户天下表单,点击提交按钮,把数据提交给后端
            2) 后端-接收请求,接收数据
            3) 后端-把数据保存进数据库

        数据从数据库到页面:
            1) 前端-浏览器地址栏数据地址,相当于大宋get方式请求
            2) 后端-接收这个请求
            3) 后端-去数据库查询数据,把数据和模板合并渲染,响应给前端


2.新闻发布系统环境搭建
    1) 全局安装 express-generator(已安装)
        cnpm i express-generactor -g

    2) 使用express创建项目目录    
        express news -e  (创建文件夹,包含bin等文件夹)
    
    3) 进入项目
        //需要安装mongoose环境进行数据库操作
            1-手动在package.json手动添加,*为任意版本
            2-使用npm/cnpm mongoose --save(文件夹中安装依赖)

    4) 从当前项目目录进入DOS,一次性安装所有依赖
        cnpm i

    5) 打开App.js, 监听端口
        app.listen(666,()=>{
            console.log("服务器启动成功...")
        })
    
    6) 启动项目
        nodemon app

3.实现功能之前,先准备一个数据库
        数据库名字:news
        集合名称: article

3.新增新闻功能的实现
    1) 后端-接收根目录的请求,返回一个新增新闻的表单回去
    2) 前端-填写表单内容,点击发布按钮  发送一个post方式的请求,把填写的这些数据发送到后端
        注意***:
            改表单的name属性  请求地址  请求方式
    3) 后端-接收这个请求 , 接收数据
    4) 后端-链接数据库 定义骨架 发布模型 把这些数据挂在实体上(多加一个时间) 执行保存方法 存入数据库
    5)后端-响应给前端一个弹框,弹出新增新闻成功,并且跳转到新闻列表页面(等同于发送一个get请求)

5.新闻列表的实现
    1) 前端-因为跳转到新闻列表页面 浏览器地址栏刷新 等同于发送一个get方式的请求
    2) 后端-接收这个请求 去数据库查询出所有的新闻数据
    3) 后端-数据和模板合并渲染,生成html 返回给前端
        注意: 要修改ejs模板

6. 删除功能的实现
    1) 前端-点击删除按钮, 通过a标签发送给一个get方式的请求 需要传递对应的id
    2) 后端-接收请求 接收id
    3) 后端-根据id找出这条数据,执行删除操作
    4) 后端-返回给前端 删除成功的一个弹出 刷新一下页面

7. 修改功能的实现
    A) 把原来的数据显示出来
        1) 前端-点击修改 通过a标签 发送一个get方式的请求  需要穿第一个ID
        2) 后端-接收请求 接收id ,根据id将数据查询出来
        3) 后端-将数据和模板合并渲染,生成HTML,返回给前端

    B) 把修改后的新数据 保存回去
        1) 前端-修改数据, 发送请求, 把新的数据和原来的id一起发送到后端
        2) 后端-接收数据, 接收新的数据 和原来需要修改的数据ID
        3) 后端-根据id 查询出原来的数据
        4) 后端-把新的数据 一一对应 赋值给原来的数据
        5) 后端-执行保存操作, 返回给前端一个修改成功的弹出 跳转到新闻列表页面

8. 查看新闻详情
        1)前端-点击新闻标题 通过a标签 发送一个get当时的请求给后端 传一个id
        2) 后端-接收请求 接收这个id
        3) 后端根据id  查询出这一条新闻
        4) 后端-把这一条新闻的数据 和模板合并渲染 返回给前端

*/